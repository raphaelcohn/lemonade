#!/usr/bin/env sh
# This file is part of lemonade. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/lemonade/master/COPYRIGHT. No part of lemonade, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2017 The developers of lemonade. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/lemonade/master/COPYRIGHT.


_program()
{
	core_usesIn core temporaryFiles variable/array
	core_usesIn lemonade
	
	lemonade()
	{
		lemonade_all
	}
}
# pdksh / mksh have problems with unsetting a variable that was never set...
if [ "${CDPATH+set}" = 'set' ]; then
        unset CDPATH
fi

_program_path_find()
{
    if [ "${0%/*}" = "$0" ]; then

        # We've been invoked by the interpreter as, say, bash program
        if [ -r "$0" ]; then
			pwd -P
        # Clutching at straws; probably run via a download, anonymous script, etc, weird execve, etc
        else
			printf '\n'
        fi
            
    else
        
	    # We've been invoked with a relative or absolute path (also when invoked via PATH in a shell)
    
	    _program_path_find_parentPath()
	    {
            parentPath="${scriptPath%/*}"
            if [ -z "$parentPath" ]; then
                   parentPath='/'
            fi
            cd "$parentPath" 1>/dev/null
	    }
    
	    if command -v realpath 1>/dev/null 2>/dev/null; then
        (
			scriptPath="$(realpath "$0")"

			_program_path_find_parentPath
            pwd -P
        )
	    elif command -v readlink 1>/dev/null 2>/dev/null; then
        (
            scriptPath="$0"
        
            while [ -L "$scriptPath" ]
            do
				_program_path_find_parentPath
				scriptPath="$(readlink "$scriptPath")"
            done

            _program_path_find_parentPath
            pwd -P
        )
	    else
        # This approach will fail in corner cases where the script itself is a symlink in a path not parallel with the concrete script
        (
            scriptPath="$0"
        
            _program_path_find_parentPath
            pwd -P
        )
	    fi
    
	fi
}
_program_path="$(_program_path_find)"

_program_name='lemonade'
_program_version='unversioned'
_program_package_or_build=''
_program_libPath="${_program_path}/lib"
_program_etcPath="${_program_path}/etc"
_program_varPath="${_program_path}/var"
_program_binPath="${_program_path}/bin"
_program_entrypoint='lemonade'

lemonade_verbose='1'

_program_commandLine_parseInitialise()
{
	:
}

_program_commandLine_helpMessage()
{
	_program_commandLine_helpMessage_usage="[OPTION]..."
	_program_commandLine_helpMessage_description="Builds a website using hugo and caddy."
	_program_commandLine_helpMessage_options="
  -i, --input-path PATH     Path to input data
                            Defaults to current working directory:-
                            $(pwd)
  -o, --output-path PATH    Path to use when creating output.
                            Created if it doesn't exist.
                            Defaults to current working directory:-
                            $(pwd)
  -c, --clean-cache [ON]    Clean cache on start. Defaults to OFF
  -d, --development [ON]    Skip validation and build checks and warnings.
                            Skip HTML, etc minification.
							Skip image crushing.
							Skip compression.
                            Not recomended except in development.
                            Defaults to OFF."
    _program_commandLine_helpMessage_optionsSpacing='     '
	_program_commandLine_helpMessage_configurationKeys="
  lemonade_inputPath    Equivalent to --input-path
  lemonade_outputPath   Equivalent to --output-path
  lemonade_cleanCache   Equivalent to --clean-cache
  lemonade_development  Equivalent to --development
"
	_program_commandLine_helpMessage_examples="
  ${_program_name}
"
}

_program_commandLine_optionExists()
{
	case "$optionName" in
		
		s|input-path)
			echo 'yes-argumented'
		;;
		
		o|output-path)
			echo 'yes-argumented'
		;;
		
		c|clean-cache)
			echo 'yes-optionally-argumented'
		;;
		
		d|development)
			echo 'yes-optionally-argumented'
		;;
		
	esac
}

_program_commandLine_processOptionWithArgument()
{
	case "$optionName" in
		
		s|input-path)
			core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			lemonade_inputPath="$optionValue"
		;;
		
		o|output-path)
			core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			lemonade_outputPath="$optionValue"
		;;
		
		c|clean-cache)
			core_validate_isBoolean $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			lemonade_cleanOutput="$optionValue"
		;;
	
		d|development)
			core_validate_isBoolean $core_commandLine_exitCode_USAGE 'option' "$optionNameIncludingHyphens" "$optionValue"
			lemonade_development="$optionValue"
		;;
		
	esac
}

_program_commandLine_processOptionWithoutArgument()
{
	case "$optionName" in
		
		c|clean-cache)
			lemonade_cleanCache=on
		;;
	
		d|development)
			lemonade_development=on
		;;
		
	esac
}

_program_commandLine_handleNonOptions()
{
	if [ $# -ne 0 ]; then
		core_validate_exit "Do not supply non-options"
	fi
}

_program_commandLine_validate()
{
	if core_variable_isSet lemonade_inputPath; then
		core_validate_folderPathReadableAndSearchable $core_commandLine_exitCode_CONFIG 'configuration setting' 'lemonade_inputPath' "$lemonade_swaddlingPath"
	else
		core_message INFO "Defaulting --input-path to current working directory"
		lemonade_inputPath="$(pwd)"/input
	fi
	
	if core_variable_isSet lemonade_outputPath; then
		core_validate_folderPathIsReadableAndSearchableAndWritableOrCanBeCreated $core_commandLine_exitCode_CONFIG 'configuration setting' 'lemonade_outputPath' "$lemonade_outputPath"
	else
		core_message INFO "Defaulting --output-path to current working directory"
		lemonade_outputPath="$(pwd)"/output
	fi
	
	if core_variable_isSet lemonade_cleanCache; then
		core_validate_isBoolean $core_commandLine_exitCode_CONFIG 'configuration setting' 'lemonade_cleanCache' "$lemonade_cleanCache"
	else
		lemonade_cleanCache=off
	fi
	
	if core_variable_isSet lemonade_development; then
		core_validate_isBoolean $core_commandLine_exitCode_CONFIG 'configuration setting' 'lemonade_development' "$lemonade_development"
	else
		lemonade_development=off
	fi
}

# Assumes pwd, and so requires this code to be running from this folder
. "$_program_libPath"/shellfire/core/init.functions "$@"
